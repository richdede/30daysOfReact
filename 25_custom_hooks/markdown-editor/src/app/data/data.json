[
  {
    "createdAt": "04-01-2022",
    "name": "untitled-document.md",
    "content": "",
    "id": "BC2wVPEUFuXk0AzR8JxHr"
  },
  {
    "createdAt": "04-01-2022",
    "name": "welcome.md",
    "content": "# Welcome to Markdown\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\n\n## How to use this?\n\n1. Write markdown in the markdown editor window\n2. See the rendered markdown in the preview window\n\n### Features\n\n- Create headings, paragraphs, links, blockquotes, inline-code, code blocks, and lists\n- Name and save the document to access again later\n- Choose between Light or Dark mode depending on your preference\n\n> This is an example of a blockquote. If you would like to learn more about markdown syntax, you can visit this [markdown cheatsheet](https://www.markdownguide.org/cheat-sheet/).\n\n#### Headings\n\nTo create a heading, add the hash sign (#) before the heading. The number of number signs you use should correspond to the heading level. You'll see in this guide that we've used all six heading levels (not necessarily in the correct way you should use headings!) to illustrate how they should look.\n\n##### Lists\n\nYou can see examples of ordered and unordered lists above.\n\n###### Code Blocks\n\nThis markdown editor allows for inline-code snippets, like this: `<p>I'm inline</p>`. It also allows for larger code blocks like this:\n\n```\n<main>\n  <h1>This is a larger code block</h1>\n</main>\n```",
    "id": "cTRCI66YgAoCwP3f0wyWH"
  },
  {
    "createdAt": "12-18-2023",
    "name": "README.md",
    "content": "# Frontend Mentor - In-browser markdown editor solution\n\nThis is a solution to the [In-browser markdown editor challenge on Frontend Mentor](https://www.frontendmentor.io/challenges/inbrowser-markdown-editor-r16TrrQX9). Frontend Mentor challenges help you improve your coding skills by building realistic projects.\n\n## Table of contents\n\n- [Frontend Mentor - In-browser markdown editor solution](#frontend-mentor---in-browser-markdown-editor-solution)\n  - [Table of contents](#table-of-contents)\n  - [Overview](#overview)\n    - [The challenge](#the-challenge)\n    - [Screenshot](#screenshot)\n    - [Links](#links)\n  - [My process](#my-process)\n    - [Built with](#built-with)\n    - [What I learned](#what-i-learned)\n      - [React Recoil](#react-recoil)\n      - [React-markdown](#react-markdown)\n      - [Radix-UI](#radix-ui)\n    - [Continued development](#continued-development)\n  - [Author](#author)\n  - [Acknowledgments](#acknowledgments)\n\n## Overview\n\n### The challenge\n\nUsers should be able to:\n\n- Create, Read, Update, and Delete markdown documents\n- Name and save documents to be accessed as needed\n- Edit the markdown of a document and see the formatted preview of the content\n- View a full-page preview of the formatted content\n- View the optimal layout for the app depending on the device's screen size\n- See hover states for all interactive elements on the page\n- **Bonus**: If you're building a purely front-end project, use localStorage to save the current state in the browser that persists when the browser is refreshed\n- **Bonus**: Build this project as a full-stack application\n\n### Screenshot\n\n![Frontend In-browser markdown editor screenshot](./screenshot.jpeg)\n\n### Links\n- Solution URL: [https://github.com/kamiliano1/in-browser-markdown-editor](https://github.com/kamiliano1/in-browser-markdown-editor)\n\n- Live Site URL: [https://in-browser-markdown-editor-omega.vercel.app/](https://in-browser-markdown-editor-omega.vercel.app/)\n\n## My process\n\n### Built with\n\n- Semantic HTML5 markup\n- CSS custom properties\n- FlexBox\n- CSS Grid\n- Mobile-first workflow\n- [React](https://reactjs.org/) - JS library\n- [Next.js](https://nextjs.org/) - React framework\n- [React Recoil](https://recoiljs.org/)\n- [radix-ui](https://www.radix-ui.com/)\n- [react-markdown](https://www.npmjs.com/package/react-markdown)\n\n### What I learned\n\n#### React Recoil\n\nTo manage the state I've used\n```js\nmarkdownAtom.ts;\n```\n```ts\ntype MarkdownDataType = {\n  createdAt: string;\n  name: string;\n  content: string;\n  id: string;\n};\n  data: MarkdownDataType[];\n  isLightMode: boolean;\n  isSidebarOpen: boolean;\n  isDeleteModalOpen: boolean;\n  activatedMarkdownPart: ActivatedPartType;\n  activeMarkdownId: string;\n  inputMarkdownValue: string;\n  isReloaded: boolean;\n```\nisReloaded is created to prevent the infinite loop\n\n#### React-markdown\n\nThe first time I used it. Was surprisingly easy to implement markdown to the project. More work was done with formatting elements to match the design.\n\n#### Radix-UI\n\nTo improve accessibility:\n\n- radix-ui/react-switch - light and dark mode switcher\n- radix-ui/react-dialog - delete markdown modal\n- radix-ui/react-navigation-menu - navbar and sidebar with keyboard navigation\n\n### Continued development\n\n- Finish this project as full-stack with logging features,\n- load and save markdown from and to the file,\n- implement different color palettes,\n\n## Author\n\n- Website - [Kamil Szymon](https://github.com/kamiliano1)\n- Frontend Mentor - [@kamiliano1](https://www.frontendmentor.io/profile/kamiliano1)\n- Twitter - [@Kamil9821030111](https://twitter.com/Kamil9821030111)\n\n## Acknowledgments\n\nI had problems with implementing a table of contents and clickable heading. I've used the solution provided by [sobelk](https://gist.github.com/sobelk/16fe68ff5520b2d5e2b6d406e329e0de)",
    "id": "0TRYI66YgCoCwP3F0wAWB"
  }
]
